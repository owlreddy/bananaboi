'use server';

/**
 * @fileOverview This file defines a Genkit flow for assisting users in refining and composing prompts for image generation.
 *
 * It includes:
 * - `assistedPromptComposition` - An async function that takes an initial prompt and context as input and returns a refined prompt.
 * - `AssistedPromptCompositionInput` - The input type for the `assistedPromptComposition` function.
 * - `AssistedPromptCompositionOutput` - The output type for the `assistedPromptComposition` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssistedPromptCompositionInputSchema = z.object({
  initialPrompt: z.string().describe('The initial prompt provided by the user.'),
  context: z.string().optional().describe('Additional context or instructions to guide prompt refinement.'),
});

export type AssistedPromptCompositionInput = z.infer<typeof AssistedPromptCompositionInputSchema>;

const AssistedPromptCompositionOutputSchema = z.object({
  refinedPrompt: z.string().describe('The refined prompt generated by the AI.'),
});

export type AssistedPromptCompositionOutput = z.infer<typeof AssistedPromptCompositionOutputSchema>;

export async function assistedPromptComposition(input: AssistedPromptCompositionInput): Promise<AssistedPromptCompositionOutput> {
  return assistedPromptCompositionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'assistedPromptCompositionPrompt',
  input: {
    schema: AssistedPromptCompositionInputSchema,
  },
  output: {
    schema: AssistedPromptCompositionOutputSchema,
  },
  prompt: `You are an AI prompt assistant. Your task is to refine the user's initial prompt for image generation, 
taking into account any additional context provided. The goal is to create a more detailed, specific, and creative prompt 
that will result in a better image generation.

Initial Prompt: {{{initialPrompt}}}

{{#if context}}
Context: {{{context}}}
{{/if}}

Refined Prompt:`, 
});

const assistedPromptCompositionFlow = ai.defineFlow(
  {
    name: 'assistedPromptCompositionFlow',
    inputSchema: AssistedPromptCompositionInputSchema,
    outputSchema: AssistedPromptCompositionOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
